import client from 'part:@sanity/base/client';

// Run this script with: `sanity exec --with-user-token removeReferenceFromArray.js`
//
// This example shows how you may write a script that filters an array of references (in this case links)
// which contains "org" in their 'permalink' field to be removed from an array of references in your document
// This will patch documents in batches of 100 and continue patching until no more documents are
// returned from the query.
//
// This script can safely be run, even if documents are being concurrently modified by others.
// If a document gets modified in the time between fetch => submit patch, this script will fail,
// but can safely be re-run multiple times until it eventually runs out of documents to patch.

// A few things to note:
// - This script will exit if any of the mutations fail due to a revision mismatch (which means the
//   document was edited between fetch => update)
// - The query must eventually return an empty set, or else this script will continue indefinitely.
// - The query on line 25 works to progress through documents because having successfully patched
//   the first 100, the patched documents won't show up in a subsequent query.

// Fetching documents that matches the precondition for the migration.
// NOTE: This query should eventually return an empty set of documents to mark the patch
// as complete
const fetchDocuments = () =>
  client.fetch(
    `*[_type == 'page' && defined(links) && references(*[permalink match '*org*']._id)][0...100] {..., "followLinks": links[]->}`
  );

const buildPatches = docs =>
  docs.map(doc => {
    return {
      id: doc._id,
      patch: {
        unset: doc.followLinks
          .filter(elem => {
            return elem.permalink.includes('org');
          })
          .map(item => `links[_ref=="${item._id}"]`),
        // This will cause the migration to fail if any of the documents has been
        // modified since it was fetched.
        ifRevisionID: doc._rev
      }
    };
  });

const createTransaction = patches =>
  patches.reduce(
    (tx, patch) => tx.patch(patch.id, patch.patch),
    client.transaction()
  );

const commitTransaction = tx => tx.commit();

const migrateNextBatch = async () => {
  const documents = await fetchDocuments();
  const patches = buildPatches(documents);
  if (patches.length === 0) {
    console.log('No more documents to migrate!');
    return null;
  }

  console.log(
    `Migrating batch:\n %s`,
    patches
      .map(patch => `${patch.id} => ${JSON.stringify(patch.patch)}`)
      .join('\n')
  );
  const transaction = createTransaction(patches);
  await commitTransaction(transaction);
  return migrateNextBatch();
};

migrateNextBatch().catch(error => {
  console.error(error);
  process.exit(1);
});
