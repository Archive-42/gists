/* ---------
 * Challenge
 * ---------
 * We give you an Array of friend's list.
 * Write a method called greetingForAllFriends which returns:
 * Message sample: for the friend "Bilal" we get "Hello, Bilal!"
 * 
 * Rules:
 * If the argument is null, the method should return null/nil/None according to 
 * the given language (null for JS, None for Python and so on)
 * If the argument is an empty array, the method should return null/nil/None, as stated above
 * If the argument is a valide array of strings, the method should return a 
 * hello message for every array entry
*/

function greetingForAllFriends(friends){
    if (friends == null || friends.length == 0) {
        return null;
    }
    
    else {
        const messages = [];
        friends.map(friend => {
            messages.push(`Hello, ${friend}!`);
        });
        return messages; 
    }
}

/* ---------
 * Challenge
 * ---------

 Write a function that checks whether a number is prime 
 or not (should return true or false). A prime number is 
 any natural number that is greater than 1 and is divisible 
 only by itself and 1.
*/

function PrimeTest(a){
  if (isNaN(a) || !isFinite(a) || a % 1 || a < 2) return false; 
   const m = Math.sqrt(a);
   for (let i = 2; i <= m; i++) if (a % i==0) return false;
   return true;
};

/* ---------
 * Challenge
 * ---------
 * 
 * Method 1
   --------
	The first method takes in a valid int (positive or negative) and returns the following:

	for any multiple of 3 the string "THREE",
	for any multiple of 5 the string "FIVE",
	for any multiple of both the string "BOTH",
	for all other numbers the original int.
 
 * Method 2
   --------

 	The second method takes valid ints (positive or negative) and returns a list of the values that follow the above rules.
	The first value may be greater than or less than the second and the list should increment/decrement appropriately
	For example an input of 10,13 should generate a response of ['FIVE', 11, 'THREE', 13].
*/

function getNumber(number){
  //your code here
  if (number % 5 == 0 && number % 3 == 0) {
      return "BOTH";
  }
  
  else if (number % 3 == 0) {
      return "THREE";
  }
  
  else if (number % 5 == 0) {
      return "FIVE";
  }
  
  else {
      return number;
  }
};

function getNumberRange(first, last){
    let list = [];

    if (first < last) {
      for(var i = first; i <= last; i++) {
        list.push(i);
      }
    } 

    // Last is greater 
    else {
        for(var i = last; i <= first; i++) {
          list.push(i);
        }
        if (last < 0) {
          list = list.reverse(); 
        }
    }
    
    const response = [];
    for(var i = 0; i < list.length; i++) {
        response.push(getNumber(list[i]));
    }

    return response; 
};

/* ---------
 * Challenge
 * ---------

 Your job is to write a function which increments a string, 
 to create a new string. If the string already ends with a number, 
 the number should be incremented by 1. If the string does not end 
 with a number the number 1 should be appended to the new string.
*/

function incrementString (string) {

  const numberPattern = /\d+/g;
  lastChar = parseInt(string.substr(string.length - 1), 10);

  if (lastChar >= 0) {
    const matches = parseInt(string.match(numberPattern)[0]) + 1;
    let slicer = matches.toString().length * -1;

    if(string.match(numberPattern)[0].length < matches.toString().length) {
      slicer += 1; 
    };   
    
    return string.slice(0, slicer) + matches; 
  } else {
    return string + 1; 
  }
}

/* ---------
 * Challenge
 * ---------

 Calculate the sum of all the arguments passed to a function.

 Note: If any of the arguments is not a finite number the function 
 should return false/False instead of the sum of the arguments.
*/

function sum(...args) {

  let total = 0;

  for(let i = 0; i < args.length; i++) {
    if( args[i] != null && (args[i] >= 0 || args[i] <= 0) ) {
      total += args[i]; 
    } else {
      return false; 
    }
  }
  
  return total;
}

/* ---------
 * Challenge
 * ---------

 * Given two integers, which can be positive and negative, find the sum of 
 * all the numbers between including them too and return it. If both numbers 
 * are equal return a or b.

 * Note! a and b are not ordered!

	Example: 
	GetSum(1, 0) == 1
	GetSum(1, 2) == 3
	GetSum(0, 1) == 1
	GetSum(1, 1) == 1
	GetSum(-1, 0) == -1
*/

function GetSum( a, b ) {
  const list = [];
  
  if ( a < b ) {
    for(var i = a; i <= b; i++) {
      list.push(i);
    }
  }
  
  else {
    for(var i = b; i <= a; i++) {
      list.push(i);
    }
  }
  
  // ES6 to the rescue
  const sum = list.reduce((a, b) => a + b);
  return sum; 
}

/* ---------
 * Challenge
 * ---------

 Two teams of 5 members will face off, the strongest of which will prevail. 
 Each team member will be assigned a strength rating (1-9), with the most 
 powerful members having a rating of 9. Your goal is to determine, based on 
 the cumulative strength of the members of each team, which team will win the war.

 The teams will be represented by an array of arrays:

 [[5,0,3,2,1], [1,6,8,2,9]]  // 11 < 26 ; "Team 2 wins!"

 If team one is stronger, return the string "Team 1 wins!" If team two is stronger, 
 return the string "Team 2 wins!"

 If the two teams are of equal strength, the team with the strongest Anchor (the member 
 furthest from the center of the rope) will win. In the above example, the member with 
 strength 5 is team one's Anchor and strength 9 is team two's Anchor. If the teams and 
 the Anchors are both of equal strength, return the string "It's a tie!"
*/

function tug_o_war(teams) {
  //Code
  const team1 = teams[0].reduce((a, b) => a + b);
  const team2 = teams[1].reduce((a, b) => a + b);
   
  if (team1 > team2) {
    return "Team 1 wins!";
  }
  
  else if (team1 < team2) {
    return "Team 2 wins!";
  }
  
  else {
    const max1 = Math.max(teams[0]);
    const max2 = Math.max(teams[1]);
    if(max1 < max2) {
      return "Team 2 wins!";
    } 
    else if(max2 < max1) {
      return "Team 1 wins!"; 
    } else {
      return "It's a tie!";
    }
  }
}

/* ---------
 * Challenge 
 * ---------

 Create an addition function that does not utilize the + or - operators.

 Note: You may not use the + and - operators within a subroutine, or use eval or new Function.
*/

function add (x, y) {
 while(y) {
   x^=y, y=(y&x^y)<<1;   
 } 
 return x;
}
/* ---------
 * Challenge
 * ---------

 	Given an array of integers of any length, return an array that has 1 added to the value 
 	represented by the array.

	For example an array [2, 3, 9] equals 239, add one would return an array [2, 4, 0].

	[4, 3, 2, 5] would return [4, 3, 2, 6]

	The array can't be empty and only positive, single digit integers are allowed. 
	The function should return null if the array is empty or any of the array values are 
	negative or more than 10.

	[1, -9] would return null/nil/None (according to the language implemented).
*/

function upArray(arr){ 

  
  if(arr.length == 0) {
    return null; 
  }
  
  if(arr.length > 16) {
    val = arr[arr.length - 1];
    arr[arr.length - 1] = val + 1; 
    return arr; 
  }
  
  for(var i = 0; i < arr.length; i++) {
    if(arr[i] < 0 || arr[i].toString().length > 1) {
      return null; 
    }
  }
  
  let strings = "";
  arr.map(item => {
    strings += item;
  });
  

  const newValue = (parseInt(strings) + 1).toString(); 
  console.log(newValue); 
  const output = [];
  
  for(var i = 0; i < newValue.length; i++) {
    output.push(parseInt(newValue.charAt(i))); 
  }
  
  return output; 
  
}

/* ---------
 * Challenge 
 * ---------

 Our fruit guy has a bag of fruits (array of strings) where some 
 fruits are rotten, he wants to replace all the rotten fruits by 
 good ones. For example, given this array ["apple","rottenBanana","apple"] 
 the replaced array should be ["apple","banana","apple"]. Your task is to 
 implement a method that will take as an argument an array of strings 
 containing fruits and should return an array of strings where all the 
 rotten fruits are replaced by good ones.
*/ 

function removeRotten(bagOfFruits){
  const newBagOfFruits = []; 
  
  if (bagOfFruits == null) {
    return []; 
  }
  
  bagOfFruits.map(item => {
    newBagOfFruits.push(item.replace(/rotten/i, '').toLowerCase()); 
  });
  
  return newBagOfFruits; 
}

/* ---------
 * Challenge
 * ---------

 Create a function isDivisible(n,x,y) that checks if a 
 number n is divisible by two numbers x AND y.
*/

function isDivisible(n, x, y) {
  if(n % x == 0 && n % y == 0) {
    return true;
  } else {
    return false; 
  }
}
/* ---------
 * Challenge
 * ---------

 * Create a function that returns True if a given number is divisible by 4, otherwise it should return False.
*/

function divisibleByFour (num) {
  return num % 4 === 0 ? true : false;
} 
/* Challenge

Kids drink toddy.
Teens drink coke.
Young adults drink beer.
Adults drink whisky.

Make a function that receive age, and return what they drink.

Rules: Children under 14 old.
Teens under 18 old.
Young under 21 old.
Adults have 21 or more.

Example:

peopleWithAgeDrink(13); // => drink toddy
peopleWithAgeDrink(17); // => drink coke
peopleWithAgeDrink(18); // => drink beer
peopleWithAgeDrink(20); // => drink beer
peopleWithAgeDrink(30); // => drink whisky

*/

const peopleWithAgeDrink = old => {
  return old < 14 ? "drink toddy" : old < 18 ? "drink coke" : old < 21 ? "drink beer" : old > 21 ? "drink whisky" : "drink whisky";
};

/* ---------
 * Challenge
 * ---------

 This function should test if the factor is a factor of base.

 Return true if it is a factor or false if it is not.
*/

function checkForFactor (base, factor) {
  return base % factor == 0 ? true : false; 
}
/* ---------
 * Challenge
 * ---------
 * Rewrite the code of the function factorial
 * in a way to use recursion
*/

function factorial(num)
{

    if (num < 0) {
        return -1;
    }

    else if (num == 0) {
        return 1;
    }

    else {
        return (num * factorial(num - 1));
    }
}
/* ---------
 * Challenge
 * ---------

 Make a program that takes input and returns "Fizz" if it is a multiple of 7, 
 "Fang" if it is a mulitple of 49 AND 3, "Foo" if it is a multiple of 15, and 
 "Far" if it is not divisible by any of those.

 Note: Your program should only give one output. Note: When you are making your 
 code you should check the divisibility such that it checks 49 and 3 first then 7 
 then 15. Check the example test codes for examples of the outputs and inputs.
*/


function multiples(x){
  
  if (x % 49 == 0 && x % 3 == 0) {
    return "Fang";
  }
  
  else if (x % 7 == 0) {
    return "Fizz"; 
  }
  
  else if (x % 15 == 0) {
    return "Foo";
  }
  
  else {
    return "Far"; 
  }
}
/* Challenge 

After calling the function findSum() with any number of non-negative 
integer arguments, it should return the sum of all those arguments. 
If no arguments are given, the function should return 0, if negative 
arguments are given, it should return -1.

*/

function findSum(...args) {
  let total = 0;
  if(args) {
    for(let i = 0; i < args.length; i++) {
       if(args[i] < 0) {
         return -1;
       }
       total += args[i];
    }
    return total;
  } else {
    return 0;
  }
}

/* ---------
 * Challenge
 * ---------

 In this Kata you will create a function that takes a list of 
 lists as an input and returns a flat list.

 flatten([[1,2],[3,4]]) == [1,2,3,4]
 flatten([[1],[2],[3],[4]]) == [1,2,3,4]
*/

function flatten(l){
  return [].concat.apply([], l); 
}