"""solution to the largest-continuous-sum problem"""

def largest_continuous_sum(arr):
    """returns the highest sum of a continuous sequence in a given list"""

    largest = 0
    queue = []
    for num in arr:
        if len(queue) > 0 and queue[-1] + 1 != num:
            sum = reduce(lambda x, y: x + y, queue)
            if largest < sum:
                largest = sum
            queue = []

        queue.append(num)

    return largest

from __future__ import division
from math import ceil
from itertools import combinations
from operator import mul

# Sum of multiples of 3 or 5 under 1000, simplified:
# print (3 * 333 * 334 / 2) + (5 * 199 * 200 / 2) - (15 * 66 * 67 / 2)

def getSumOfMultiple(num, limit):
  return int((ceil(limit / num) - 1) * ceil(limit / num) * num / 2)

def getSumOfMultiples(multiples, limit):
  result = 0
  sign = 1
  for i in range(1, len(multiples) + 1):
    for x in combinations(multiples, i):
      result += sign * getSumOfMultiple(reduce(mul, x, 1), limit)
    sign *= -1
  return result

class once:
    def __init__(self, func, times=1):
        self.times = int(times)
        self.func  = func
    def __call__(self, *args, **kwargs):
        if self.times > 0:
            self.times -= 1
            return self.func(*args, **kwargs)

from math import sqrt

def is_prime(n):
    if n <= 1:
        return False
    elif n == 2:
        return True
    elif n % 2 == 0:
        return False
    for i in xrange(3, int(sqrt(n))+1, 2):
        if n % i == 0:
            return False
    return True

from random import randint

def quickSort(lst):
    # List of 0 or 1 items is already sorted
    if len(lst) <= 1:
        return lst
    else:
        # Pivot can be chosen randomly
        pivotIndex = randint(0, len(lst)-1)
        pivot = lst[pivotIndex]
        # Elements lower than and greater than pivot
        lesser, greater = [], []

        for index in range(len(lst)):
            # Don't do anything if you're at the pivot
            if index == pivotIndex:
                pass
            else:
                # Sort elements into < pivot and >= pivot
                el = lst[index]
                if el < pivot:
                    lesser.append(el)
                else:
                    greater.append(el)
                    
        # Sort lesser and greater, concatenate results
        return quickSort(lesser) + [pivot] + quickSort(greater)

class Node(object):
    def __init__(self, value):
        self.value = value
        self.left = None
        self.right = None


def traverse_levelorder(root):
    if not root:
        return
    q = [root, True]  # Use True as sentinel for end of row
    while len(q) > 0:
        node = q.pop(0)
        print node.value,
        if node.left:
            q.append(node.left)
        if node.right:
            q.append(node.right)
        if q[0] is True:  # End of row
            q.pop(0)
            if len(q) > 0:
                q.append(True)
            print

# Simple function that will take a string of latin characters and return a unique hash
def hashString(str):
  # Map characters to prime numbers to multiply
  charMap = {
    'a': 2,
    'b': 3,
    'c': 5,
    'd': 7,
    'e': 11,
    'f': 13,
    'g': 17,
    'h': 19,
    'i': 23,
    'j': 29,
    'k': 31,
    'l': 37,
    'm': 41,
    'n': 43,
    'o': 47,
    'p': 53,
    'q': 59,
    'r': 61,
    's': 67,
    't': 71,
    'u': 73,
    'v': 79,
    'w': 83,
    'x': 89,
    'y': 97,
    'z': 101,
    'A': 103,
    'B': 107,
    'C': 109,
    'D': 113,
    'E': 127,
    'F': 131,
    'G': 137,
    'H': 139,
    'I': 149,
    'J': 151,
    'K': 163,
    'L': 167,
    'M': 173,
    'N': 179,
    'O': 181,
    'P': 191,
    'Q': 193,
    'R': 197,
    'S': 199,
    'T': 211,
    'U': 223,
    'V': 227,
    'W': 229,
    'X': 233,
    'Y': 239,
    'Z': 241
  }

  return reduce(lambda memo, char: memo * charMap[char], list(str), 1);

def anagramDetection(parent, child):
  length = len(child)
  anagram = hashString(child)
  total = 0

  for i in range(0, len(parent) - length):
    if hashString(parent[i: i + length]) == anagram:
      total = total + 1

  return total

import unittest

"""solution to the array pair sum problem"""

def array_pair_sum_iterative(arr, k):
    """
    returns the array of pairs using an iterative method.
    complexity: O(n^2)
    """

    result = []

    for i in range(len(arr)):
        for j in range(i + 1, len(arr)):
            if arr[i] + arr[j] == k:
                result.append([arr[i], arr[j]])

    return result


def array_pair_sum_sort(arr, k):
    """
    first sort the array and then use binary search to find pairs.
    complexity: O(nlogn)
    """

    result = []
    arr.sort()

    for i in range(len(arr)):
        if k - arr[i] in arr[i+1:]:
            result.append([arr[i], k - arr[i]])

    return result


def array_pair_sum_hash_table(arr, k):
    """
    Use a hash table to store array elements of pairs.
    complexity: O(n)
    """

    result = []
    hash_table = {}

    for e in arr:
        if e in hash_table:
            result.append([k - e, e])
        else:
            hash_table[k - e] = True
    result.reverse()

    return result


# Unit tests
class array_pair_sum_tests(unittest.TestCase):

    def setUp(self):
        self.arr1 = [3, 4, 5, 6, 7]
        self.arr2 = [3, 4, 5, 4, 4]
        self.result1 = [[3, 7], [4, 6]]
        self.result2 = [[3, 5], [4, 4], [4, 4], [4, 4]]

    def test_one(self):
        self.assertEqual(
            array_pair_sum_iterative(self.arr1, 10), self.result1)
        self.assertEqual(
            array_pair_sum_sort(self.arr1, 10), self.result1)
        self.assertEqual(
            array_pair_sum_hash_table(self.arr1, 10), self.result1)

    def test_two(self):
        self.assertEqual(
            array_pair_sum_iterative(self.arr2, 8), self.result2)
        self.assertEqual(
            array_pair_sum_sort(self.arr2, 8), self.result2)
        self.assertEqual(
            array_pair_sum_hash_table(self.arr2, 8), self.result2)


if __name__ == '__main__':
    unittest.main()

# Use a dictionary to map sets of brackets to their opposites
brackets = {
  '(': ')',
  '{': '}',
  '[': ']'
}

# On each input string, process it using the balance checker
def balancedBrackets(string):
  stack = []
  # Process every character on input
  for char in string:
    # Assign an initial value in case the stack is empty
    last = 0
    # Assign the value of the last element if stack is not empty
    if stack:
      last = stack[len(stack) - 1]
    if stack and last in brackets and brackets[last] == char:
      stack.pop()
    else:
      stack.append(char)

  return not stack

"""solution to the convert array problem"""

def f(arr):
    """sorts the array by numbers in place using constant extra space"""

    position = 0
    for i in xrange(len(arr) / 3):
        gap = (len(arr) - position) / 3
        arr.insert(position + 1, arr.pop(position + gap * 1))
        arr.insert(position + 2, arr.pop(position + gap * 2))
        position += 3

    return arr

#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""solution to the csv parsing problem, handling quotes and numric values"""

def convert_to_number(value):
    """converts the passed over string to a number, if possible"""

    try:
        return int(value)
    except ValueError:
        pass

    return value

def csv_parsing(csv):
    """returns list of string/numeric csv values"""

    count = 0
    values = []
    pos = 0
    while pos < len(csv):
        if csv[pos] == ',': # skip comma from previous iteration
            pos += 1

        values.insert(count, '')
        while pos < len(csv) and csv[pos] != ',':
            if csv[pos] == '"' or csv[pos] == "'": # handle quoted strings
                first_quote = pos
                pos += 1

                while pos < len(csv) and csv[pos] != csv[first_quote]:
                    values[count] += csv[pos]
                    pos += 1

            else:
                values[count] += csv[pos]

            pos += 1

        #if the value is numeric, this will convert it.
        values[count] = convert_to_number(values[count])

        count += 1
        pos += 1

    return values

def even_occuring_element(arr):
    """Returns the even occuring element within a list of integers"""

    dict = {}
    for num in arr:
        if num in dict:
            dict[num] += 1
        else:
            dict[num] = 1

    for num in dict:
        if not dict[num] & 1: # bitwise check for parity.
            return num

"""solutions to the factorial problem"""

def factorial_iterative(num):
    """returns the factorial of num using an iterative method."""

    factor = 1

    for i in xrange(1, num + 1):
        factor *= i

    return factor

def factorial_reduce(num):
    """returns the factorial of num using a reduce (shortest method)."""

    return reduce(lambda x, y: x * y, range(1, num + 1))

def factorial_recursive(num):
    """returns the factorial of num using a recursive method."""

    if num == 1:
        return 1

    return num * factorial_recursive(num -1)

"""solutions to the fibonacci problem"""

def fibonacci_iterative(limit):
    """fibonacci sequence using an iterative approach."""

    a, b = 0, 1
    for i in xrange(limit):
        a, b = b, a + b

    return a

def fibonacci_recursive(limit):
    """fibonacci sequence using a recusive approach."""

    if limit <= 1:
        return limit

    return fibonacci_recursive(limit - 1) + fibonacci_recursive(limit - 2)

def fibonacci_reduce(limit):
    """fibonacci sequence using reduce (shortest option)."""

    return reduce(lambda x, y: x + [x[y] + x[y - 1]], range(1, limit), [0, 1])[-1]

def fibonacci_comprehension(limit):
    """fibonacci sequence using a list comprehension."""

    sequence = [0, 1]

    [sequence.append(sequence[i] + sequence[i-1]) for i in range(1, limit)]

    return sequence[-1]

"""finds the missing element in the shuffled list"""

def difference_set(orig, shuffled):
    """finds the missing element using a set."""

    return set(orig).difference(set(shuffled)).pop()

def difference_iterative(orig, shuffled):
    """finds the missing element by iterating over the list"""

    for x in orig:
        if not x in shuffled:
            return x

"""solution for the first-non-repeated-character problem"""

def first_non_repeated_character(str):
    """finds the first character in a string that's not repreated"""

    for i, char in enumerate(str):
        if i - 1 >= 0 and char == str[i - 1]:
            continue
        if i + 1 < len(str) and char == str[i + 1]:
            continue

        return char

"""accepts a multi dimensional array and returns a flattened version"""

def flatten_array(orig):
    """returns a new, flattened, list"""

    flattened_list = []

    for item in orig:
        if isinstance(item, list):
            flattened_list += flatten_array(item)
        else:
            flattened_list.append(item)

    return flattened_list

def flatten_in_place(orig):
    """flattens a given list in place"""

    is_flattened = False

    while not is_flattened: # iterating until no more lists are found

        is_flattened = True
        for i, item in enumerate(orig):

            if isinstance(item, list):
                is_flattened = False
                orig = orig[:i] + item + orig[i + 1:]

    return orig
